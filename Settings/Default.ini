# nSVPScript Script v2.0
# by: neon-nyan
# ----------------------------------------------------------
# 

# Set your preset configuration of render quality.
# It will override your User Settings and Default Settings.
#   0   = Use current configuration.
#   1   = Very Low
#   2   = Low
#   3   = Medium
#   4   = High
#   5   = Very High
#   6   = neon-nyan's Preset - recommended for real-time
#                              playback :D
#   7   = neon-nyan's Preset [only CPU]
#                            - recommended for real-time
#                              playback :D
#   8   = Placebo            - recommended for rendering ;3
# Default: 6 [list]
global preset=7

# Define how much threads that works for pre-processing 
# Default: 4 [integer]
global threads=4

# Using GPU Acceleration instead of CPU Acceleration
# Default: true [boolean]
global gpu_accel=true
global super_gpu_accel=true
global analyse_gpu_accel=true

# Define the GPU's order that you want to use.
# How to define it:
#   It separated by two number.
#   The first one defines your GPU Device order
#   and the second one defines your OpenCL Platform order
# 
# Example:
#   0   = Use your Default GPU Device 
#   1   = Use 1st GPU Device on 1st OpenCL Platform
#   2   = Use 2nd GPU Device on 1st OpenCL Platform [if you have]
#   11  = Same as 1 do.
#   12  = Same as 2 do.
#   21  = Use 1st GPU Device on 2nd OpenCL Platform [if you have too]
#   and so on...
# 
# Default: 1 [integer]
global gpu_id=12

# How much the framerate will work on.
    # Framerate numerator or multiplier
    # Default: 60 [float]
    global framerate_num=60

    # Framerate denominator or multiplier
    # Default: 1 [float]
    global framerate_den=1
    
    # If false, Num or Denum will be multiplier instead
    # absolute value.
    # Default: true [boolean]
    global framerate_mul=true
    
    # Bypassing some frame with dropping amount of frame.
    global bypass_frame=false
    
    # How much frame that will be dropped on bypass
    #   1 = framerate / 2
    #   2 = framerate / 3
    #   3 = framerate / 4
    # Default: 1 [list]
    global bypass_pass=1

# as the variable said, it defines interpolation algoritm mode
# that will be used for pre-processing
#   1   =   Interpolate frame and moves pixels without any blending.
#           It just use backward motion vector prediction.
#   2   =   Like the 1st one, but it use both of
#           motion vector prediction. Forward and Backward.
#   11  =   Interpolate frame with blending and move
#           pixels both of motion but with noticeable halos.
#   13  =   Like the 11th one, but with dynamic median prediction.
#   21  =   Same as 11th and 13th, but with additional cover/uncover
#           masking method to minimize halos artifact and improve
#           the quality of frame.
#   23  =   Same as 21st, but with extra adjacent frames for futher
#           decreasing of halos artifact, but it will decreasing of
#           smoothing than 21st do.
# Default: 21 [list]
global interpolate_mode=21

# The accuracy of motion estimation detection
#   1   =   a Full of Pixel precision. Most accuracy
#           but slower.
#   2   =   a Half of Pixel precision. It used by
#           default. Faster and better accuracy.
#   4   =   a Quarter of Pixel precision. Fastest but
#           less accuracy.
# Default: 2 [interger]
global pixel_precision=2

# Upscaling algorithm mode for subpixels on pixel_precision
# mode 2 and 4.
#   0   = Bilinear
#   1   = Bicubic [4 tap Catmull-Rom]
#   2   = Lanczos like sharper interpolation [6 tap]
# Default: 2 [list]
global pixel_upscale_mode=2

# Downscaling algorithm mode levels smoothing and
# reducing filter.
#   0   = SimpleResize like algorithm [by averaging 4 pixels]
#   1   = ReducedBy2 like algorithm [triangle shifted pixels]
#   2   = Bilinear
#   3   = Quadratic
#   4   = Bicubic
# Default: 4 [list]
global pixel_downscale_mode=4

# If true, Blend some duplicate frames with another frames
# like ConvertFPS() technique or just Repeat them like
# ChangeFPS() if false.
# It's useful if framerate < 60fps
# for better interpolation result.
# Default: false [boolean]
global blend_frame=false

# If true, It will display the demo of differences between
# smoothed frame and plain frame.
# Default: false [boolean]
global demo=false

    # Change the type of demo mode.
    #   1   =   Horizontal stack frame.
    #   2   =   Vertical stack frame.
    #   3   =   Frame difference in chroma.
    #           [requires MaskTools 2]
    # Default: 1 [list]
    global demo_type=3

# If true, Convert frame from progressive to Frame based
# TFF interlace
# Default: false [boolean]
global interlace=false

# Number of vectors grid step and size of block matching
# algorithm, specifies the block width.
# Larger block size are less sensitive, but faster.
# Smaller block size are more sensitive, but slower.
#   The size of block starts from 8 to 32 pixels.

    # Define the block width
    # Default: 16 [integer]
    global block_w=16

    # Define the block height
    # Value are same like block_w, but it recommended to have
    # 1/2 of block_w size value ;)
    # Default: 16 [integer]
    global block_h=16
    
    # Specifies block overlap value.
    #   0   =   None.
    #   1   =   Overlap each 1/8 of block size.
    #   2   =   Overlap each 1/4 of block size.
    #   3   =   Overlap each 1/2 of block size.
    # Larger value is more sensitive, but slower.
    # But it recommended if you want to rendering it first than
    # running it real-time.
    # Default: 2 [list]
    global block_overlap=2

# Specifies type of motion search method.
#   2   =   Hexagon search
#   3   =   Uneven Multi Hexagon (UMH) search
#   4   =   Exhaustive search
# Higher value are more better, But slower! :3
# Default: 4 [list]
global search_method=4

# Specifies range of Motion Search areas.
# Range: 4 - 128
# Higher value are more better, But slower! :3
# Default: 5 [integer]
global search_range=16

# Positive value is the number of levels used in the
# hierarchical analysis made while searching for
# motion vectors.
#
# Negative or zero value is the number of coarse
# levels NOT used in the hierarchical analysis made 
# while searching for motion vectors.
# Range: (-5) - 5
# Default: 3 [integer]
global search_level=3

# Specifies range of coarse frames that to be processed.
# It maybe useful for save your CPU Load when processing
# Higher Definition video.
# Range: 256 - 4096
# Default: 1280 [Integer]
global coarse_max=1280

    # Default: same as search_method
    global coarse_method=search_method
    
    # Default: same as search_range
    global coarse_range=search_range

# SATD Finest level Algorithm. a bit accurate but slower :'(
# Default: false [boolean]
global satd=false
    
    # Use SATD on Coarse frame
    # Default: true [boolean]
    global coarse_satd=true

# SAD threshold to define "bad" vectors. Value is scaled
# to block size 8x8.
# Default: 1000 [Integer]
global bad_sad=1000

    # The range of wide search for bad blocks.
    # Default: 24 [Integer]
    global bad_range=24


# Sets the motion coherences for field of vectors penalty.
# Recommended value are: 5 - 30
# Range: 1 - 100
# Defalut: 15 [integer]
global penalty_lambda=15
    
    # Scaling mode for lambda between levels.
    #   1   =   No scaling.
    #   2   =   Linear scaling.
    #   4   =   Quadratic scaling.
    # Default: 4 [List]
    global penalty_plevel=4

    # SAD limit for using vector predictor.
    # Higher value means more better but decreases
    # motion coherence.
    # Range: 2 - 32768
    # Default: 11500 [Integer]
    global penalty_lsad=11500

    # Relative penalty to SAD for new candidate vector.
    # Range: 1 - 128
    # Default: 80 [Integer]
    global penalty_pnew=80

    # Relative penalty to SAD for global predictor vector.
    # Range: 1 - 128
    # Default: same as penalty_pnew
    global penalty_pglobal=penalty_pnew

    # Relative penalty to SAD for zero vector.
    # Range: 1 - 256
    # Default: penalty_pnew * 2
    global penalty_pzero=penalty_pnew * 2

    # Relative penalty to SAD for up to 8
    # neighbours vectors.
    # Range: 1 - 128
    # Default: same as penalty_pnew
    global penalty_pnbour=penalty_pnew

    # Relative penalty to SAD for vector of reverse
    # frame.
    # Default: (framerate_num / framerate_den) / 2
    global penalty_prev=Round((framerate_num / framerate_den) / 2)

# Defines additional level of blocks recalculation on blocks
# which divided by 4. Interpolated vectors of old blocks are used
# as predictors for new vectors, with recalculation of SAD.
# 
# Only bad quality new vectors with SAD above this threshold will be
# re-estimated by search. Good vectors are not changed, but its SAD
# will be updated (re-calculated). Value is scaled to block size 8x8.
# 
# Zero means no recalculation threshold.
# Range: 0 - 16384
# Default: 2400
global refine_thsad=2400

    # Search method for recalculating bad vectors.
    #   2   =   Hexagon search
    #   3   =   Uneven Multi Hexagon (UMH) search
    #   4   =   Exhaustive search
    # Default: same as search_method
    global refine_search_method=search_method

    # Search range of recalculating bad vectors.
    # Range: 4 - 128
    # Default: same as search_range
    global refine_search_range=search_range

    # Using SATD instead of SAD for recalculation.
    # Default: same as satd
    global refine_search_satd=satd
    
    # How much threshold in percent used for blocks
    # recalculation.
    # Range: 1 - 128
    # Default: same as penalty_pnew
    global refine_penalty_pnew=penalty_pnew

# Sets cover/uncover [bad area] and masks for bad area.
    # This value used for cover/uncover [bad areas] interpolated frame.
    # More are smoother.
    # Range: 0 - 100
    # Defalut: 100 [integer]
    global mask_cover=100
    
    # Bad areas artifact that want to be masked.
    # More are accurate but it reduce smoothness effect.
    # Range: 0 - 100
    # Defalut: 10 [integer]
    global mask_area=10
    
    # Defines the exponent of relation between SAD and area
    # mask values.
    # Range: 0 - 3.0
    # Default: 1.0 [float]
    global mask_sharp=1.0

# Controls some extended scene changes.
#   0   =   Uniform interpolation for maximum smoothness.
#           output will seems like this:
#           1mmmm1mmmm
#           where 1 stands for original frame and m
#           stands for processed frame.
#   1   =   output:
#           1m1mm1m1mm
#           the results are less smoothless but at
#           the cost less artifacts.
#   2   =   output:
#           1m11m11m11
#           much less artifacts and much less smoothness :)
#   3   =   Adaptive mode that switches between modes 0, 1, or 2
#           based on overall vector field quality.
# Default: 3 [list]
global scene_mode=1

    # Limit for scene changes of 1m.
    # Range: 512 - 32768
    # Default: 2400 [integer]
    global scene_m1=2400
    
    # Limit for scene changes of 1m into 2m.
    # Range: 512 - 32768
    # Default: scene_m1 * 1.5
    global scene_m2=scene_m1 * 1.5
    
    # Limit for universal scene changes.
    # Range: 512 - 32768
    # Default: scene_m2 * 1.5
    global scene_limit=scene_m2 * 1.5
    
    # Vectors with "adjusted SAD" less than this value are
    # excluded from consideration.
    # Default: same as refine_thsad
    global scene_zero=refine_thsad
    
    # Threshold which sets how many blocks in percents have
    # to change.
    # Range: 0 - 100
    # Default: 60 [integer]
    global scene_thres=60
    
    # Additional correction parameter for "average luma" value.
    # Range: 1.0 - 5.0
    # Default: 3.0 [integer]
    global scene_luma=3.0

# TODO: trymany Definition.
global search_trymany=false

# TODO: sort Definition.
global search_sort=true

# Scales the video if necessary.
# It uses Spline64 algorithm for scaling up/down the clip.
# Default: false [boolean]
global scale=false

    # Specifies scaled width of clip.
    #   [width] = Size of width
    #   -1      = Scale width to absolute value by following height
    #             size and current clip aspect ratio.
    #   0       = Scale by original clip width size.
    # Default: 0 [integer]
    global scale_x=640
    
    # Specifies scaled height of clip.
    #   [width] = Size of height
    #   -1      = Scale height to absolute value by following width
    #             size and current clip aspect ratio.
    #   0       = Scale by original clip height size.
    # Default: 0 [integer]
    global scale_y=-1