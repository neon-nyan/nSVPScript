# nSVPScript Script v2.0
# by: neon-nyan
# ----------------------------------------------------------
# 

# Set your preset configuration of render quality.
# It will override your User Settings and Default Settings.
#   0   = Use current configuration.
#   1   = Very Low
#   2   = Low
#   3   = Medium
#   4   = High
#   5   = Very High
#   6   = neon-nyan's Preset - recommended for real-time
#                              playback :D
#   7   = Placebo            - recommended for rendering ;3
# Default: 6 [list]
global preset=6

# Amount of Max Memory used for pre-processing thread
# [scale: MB]
# Default: 1024 [integer]
global max_memory=1024

# Define how much threads that works for pre-processing 
# Default: 5 [integer]
global threads=5

# Using GPU Acceleration instead of CPU Acceleration
# Default: true [boolean]
global gpu_accel=true

# Define the GPU's order that you want to use.
# How to define it:
#   It separated by two number.
#   The first one defines your GPU Device order
#   and the second one defines your OpenCL Platform order
# 
# Example:
#   0   = Use your Default GPU Device 
#   1   = Use 1st GPU Device on 1st OpenCL Platform
#   2   = Use 2nd GPU Device on 1st OpenCL Platform [if you have]
#   11  = Same as 1 do.
#   12  = Same as 2 do.
#   21  = Use 1st GPU Device on 2nd OpenCL Platform [if you have too]
#   and so on...
# 
# Default: 1 [integer]
global gpu_id=12

# How much the framerate will work on.
    # Framerate numerator or multiplier
    # Default: 60 [float]
    global framerate_num=60

    # Framerate denominator or multiplier
    # Default: 1 [float]
    global framerate_den=1
    
    # If false, Num or Denum will be multiplier instead
    # absolute value.
    # Default: true [boolean]
    global framerate_mul=true

# as the variable said, it defines interpolation algoritm mode
# that will be used for pre-processing
#   1   =   Interpolate frame and moves pixels without any blending.
#           It just use backward motion vector prediction.
#   2   =   Like the 1st one, but it use both of
#           motion vector prediction. Forward and Backward.
#   11  =   Interpolate frame with blending and move
#           pixels both of motion but with noticeable halos.
#   13  =   Like the 11th one, but with dynamic median prediction.
#   21  =   Same as 11th and 13th, but with additional cover/uncover
#           masking method to minimize halos artifact and improve
#           the quality of frame.
#   23  =   Same as 21st, but with extra adjacent frames for futher
#           decreasing of halos artifact, but it will decreasing of
#           smoothing than 21st do.
# Default: 21 [list]
global interpolate_mode=21

# The accuracy of motion estimation detection
#   1   =   a Full of Pixel precision. Most accuracy
#           but slower.
#   2   =   a Half of Pixel precision. It used by
#           default. Faster and better accuracy.
#   4   =   a Quarter of Pixel precision. Fastest but
#           less accuracy.
# Default: 1 [interger]
global pixel_precision=1

# If true, Blend some duplicate frames with another frames
# like ConvertFPS() technique or just Repeat them like
# ChangeFPS() if false.
# It's useful if framerate < 60fps
# for better interpolation result.
# Default: true [boolean]
global blend_frame=true

# If true, It will display the demo of differences between
# smoothed frame and plain frame.
# Default: false [boolean]
global demo=false

    # Change the type of demo mode.
    #   1   =   Horizontal stack frame.
    #   2   =   Vertical stack frame.
    #   3   =   Frame difference in chroma.
    #           [requires MaskTools 2]
    # Default: 1 [list]
    global demo_type=1

# If true, Convert frame from progressive to Frame based
# TFF interlace
# Default: false [boolean]
global interlace=false

# Number of vectors grid step and size of block matching
# algorithm, specifies the block width.
# Larger block size are less sensitive, but faster.
# Smaller block size are more sensitive, but slower.
#   The size of block starts from 8 to 32 pixels.

    # Define the block width
    # Default: 32 [integer]
    global block_w=32

    # Define the block height
    # Value are same like block_w, but it recommended to have
    # 1/2 of block_w size value ;)
    # Default: 16 [integer]
    global block_h=16
    
    # Specifies block overlap value.
    #   0   =   None.
    #   1   =   Overlap each 1/8 of block size.
    #   2   =   Overlap each 1/4 of block size.
    #   3   =   Overlap each 1/2 of block size.
    # Larger value is more sensitive, but slower.
    # But it recommended if you want to rendering it first than
    # running it real-time.
    # Default: 0 [list]
    global block_overlap=0

# Specifies type of motion search method.
#   2   =   Hexagon search
#   3   =   Uneven Multi Hexagon (UMH) search
#   4   =   Exhaustive search
# Higher value are more better, But slower! :3
# Default: 2 [list]
global search_method=2

# Specifies range of Motion Search areas.
# Value range are: 4 - 128
# Higher value are more better, But slower! :3
# Default: 5 [integer]
global search_range=5

# Specifies range of coarse frames that to be processed.
# It maybe useful for save your CPU Load when processing
# Higher Definition video.
# Value range are: 256 - 16384
# Default: 1500 [Integer]
global coarse_max=1500

# SATD Finest level Algorithm. a bit accurate but slower :'(
# Default: false [boolean]
global satd=false
    
    # Use SATD on Coarse frame
    # Default: false [boolean]
    global satd_inCoarse=false

# Set the motion coherences for field of vectors pinalty.
# Recommended value are: 2 - 7
# Value range are: 1 - 24
# Defalut: 10 [integer]
global lambda=10

# Set cover/uncover [bad area] and masks for bad area.

    # This value used for cover/uncover [bad areas] interpolated frame.
    # More are smoother.
    # Value range are: 0 - 100
    # Defalut: 100 [integer]
    global mask_cover=100
    
    # Bad areas artifact that want to be masked.
    # More are accurate but it reduce smoothness effect.
    # Value range are: 0 - 200
    # Defalut: 32 [integer]
    global mask_area=32

# Scale the video if necessary.
# It uses Spline64 algorithm for scaling up/down the clip.
# Default: false [boolean]
global scale=false

    # Specifies scaled width of clip.
    #   [width] = Size of width
    #   -1      = Scale width to absolute value by following height
    #             size and current clip aspect ratio.
    #   0       = Scale by original clip width size.
    # Default: 0 [integer]
    global scale_x=854
    
    # Specifies scaled height of clip.
    #   [width] = Size of height
    #   -1      = Scale height to absolute value by following width
    #             size and current clip aspect ratio.
    #   0       = Scale by original clip height size.
    # Default: 0 [integer]
    global scale_y=-1