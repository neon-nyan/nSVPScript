# nSVPScript Script v2.0
# by: neon-nyan
# ----------------------------------------------------------
# 

global analyse_params   = """
{
    gpu: """ + String(analyse_gpu_accel) + """,
    vectors: 3,
    block: {
        w: """ + String(block_w) + """,
        h: """ + String(block_h) + """,
        overlap: """ + String(block_overlap) + """
    },
    main: {
        levels: """ + String(search_level) + """,
        search: {
            type: """ + String(search_method) + """,
            distance: """ + String(search_range) + """,
            satd: """ + String(satd) + """,
            sort: """ + String(sort) + """,
            coarse: {
                width: """ + String(coarse_max) + """,
                type: """ + String(coarse_method) + """,
                distance: """ + String(coarse_range) + """,
                satd: """ + String(coarse_satd) + """,
                trymany: """ + String(trymany) + """,
                bad: {
                    sad: """ + String(bad_sad) + """,
                    range: """ + String(bad_range) + """
                }
            }
        }
    },
    penalty: {
        lambda: """ + String(penalty_lambda) + """,
        plevel: """ + String(penalty_plevel) + """,
        lsad: """ + String(penalty_lsad) + """,
        pnew: """ + String(penalty_pnew) + """,
        pglobal: """ + String(penalty_pglobal) + """,    """ /* same as pnew */ + """
        pzero: """ + String(penalty_pzero) + """,        """ /* pnew * 2 */ + """
        pnbour: """ + String(penalty_pnbour) + """,      """ /* same as pnew */ + """
        prev: """ + String(penalty_prev) + """
    },
    refine: [{
        thsad: """ + String(refine_thsad) + """,
        search: {
            type: """ + String(refine_search_method) + """,
            distance: """ + String(refine_search_range) + """, """ /* same as pel */ + """
            satd: """ + String(refine_search_satd) + """
        },
        penalty: {
            pnew: """ + String(refine_penalty_pnew) + """
        }
    }],
    special: {delta: 1}
}
"""